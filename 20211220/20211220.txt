@ 관계 연산자
   Operator                       Description                                                          Example
1.  -eq        두 피연산자의 값이 동일한지 여부를 확인하여 같으면 참을 반환                              [$a -eq $b]
2.  -ne        두 피연산자의 값이 동일한지 여부를 확인하여 같지 않으면 참을 반환                         [$a -ne $b]
3.  -gt        왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 큰지 확인하고 그렇다면 조건이 참             [$a -gt $b]
4.  -lt        왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 작은지 확인하고 그렇다면 조건이 참           [$a -lt $b]
5.  -ge        왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 크거나 같은지 확인하고 그렇다면 조건이 참     [$a -ge $b]
6.  -le        왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 작거나 같은지 확인하고 그렇다면 조건이 참     [$a -le $b]

@ Boolean 연산자
  Operator     Description        Example
1.   !           논리 부정        [!false] is true
2.   -o          OR 연산자        [$a -lt 20 -o $b -gt 100] is true
3.   -a          AND 연산자       [$a -lt 20 -o $b -gt 100] is false

@ 문자열 연산자
   Operator     Description                                     Example
1.   =           두 피연산자의 값을 확인하고 같다면 참           [$a = $b]
2.   !=          두 피연산자의 값을 확인하고 같지 않으면 참      [$a != $b]
3.   -z          주어진 문자열 피연산자의 길이가 0이면 참        [-z.................]
4.   -n          
5.   str         

@ 파일 테스트 연산자 : 로그를 확인할 때 유용하게 쓰일 것
............
.............
.................


---- 실습 1 ----
1. 오늘 날짜를 저장하는 파일을 생성
2. 저장 위치 : /home/seonjae/date_log, 파일 이름 : Date_211210.txt
3. 저장 위치에 해당하는 폴더, 파일이 없으면 쉘스크립트를 통해서 생성되도록 처리
▶ 사진자료로 게시 完

---The case...esac Statement

#!/bin/bash
FRUIT="kiwi"

case "$FRUIT" in
"apple") echo "Apple tastes goooood"
;;
"banana") echo "I like banana milk"
;;
"kiwi") echo "New Zealand is famous for kiwi"
;;
esac


---The case...esac Statement2

#!/bin/bash
option="${1}"
case ${option} in
-f) FILE="${2}"
echo "File name is $FILE"
;;
-d DIR="${2}"
echo "Dir name is $DIR"
;;
*)
echo "`basename ${0}`:usage: [-f file] | [-d directory]"
exit 1 # Command to come out of the program with status 1
;;
esac


--- while loop
#!/bin/bash
number=0
while [ $number -le 2 ]
do
echo "Number: ${number}"
((number++))
done


--- 날짜를 이용한 루프
#!/bin/bash

startDate=`date +"%Y%m%d" -d "20210101"`
endDate=`date +"%Y%m%d" -d "20210201"`
while [ "$startDate" != "$endDate" ];
do
        echo $startDate
        startDate=`date +"%Y%m%d" -d "$startDate + 1 day"`;
done


---- 실습 2
1. 년도와 월을 입력 받아 달력을 출력한다.
2. 윤년 규칙
   - 4년으로 나누어지는 해는 윤달(2월 29일)이 있다.
   - 100년으로 나누어지는 해는 윤달이 없다.
   - 400년으로 나누어지는 해는 윤달이 있다.
이 규칙을 만족해야만 그 해가 윤년(2월에 29일이 존재)이고 아닌 경우에는 평년(2월이 28일까지만 존재)이다.

나의 Thinking Process : 
1. 우선 년도와 월을 입력받아서 달력을 출력하는 것이므로
   echo "년도와 달을 순서대로 입력하시오(ex. 2021 08)"
   read YEAR
   read MONTH
   echo 달력 쫘라라라~~~~
1-1) 달력을 쫘라라 하는 방법은 일월화수목금토 아래 echo로 줄바꿈해서 7개 이후로 줄바꿈이 되게 만들면 될 것 같다. 사실 cal 이라는 명령어로 달력을 띄울 수는 있다.
2. 윤년 규칙에 의해 4로 나눈 나머지가 0인 해는 윤년이고, 그 중 100으로 나눴을 때도 0인 해는 평년이므로 if 문으로 조건을 걸어 2월의 일수를 결정한다.
   그리고 그중 400으로 나눈 나머지가 0인 경우는 또 윤년이다!
   var yun = 0  # yun이 1이면 그 해는 윤년
   if (YEAR % 4 = 0) {
     return yun = 1
     if (YEAR % 100 = 0) {
       return yun = 0
       if (YEAR % 400 = 0){
         return yun = 1
       }
     }
   } else {
     return yun = 0
   } .....요런 느낌?
   
   if (yun = 0){
     endofthisyear=[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
   } else {
     endofthisyear=[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
   }
3. 2월이 아닌 달은 30일까지거나 31일까지거나이다. 그것도 정해줘야 한다.
   

!! 그럼 명령어를 한번 작성해보자

$ vi calender_leapyear.sh

#!/bin/bash

echo "년도와 달을 순서대로 입력하세요 (ex. 2019 03)"

read YEAR
read MONTH

startDate=date +"%Y%m%d" -d "20000101"
#endDate=date +"%Y%m%d" -d "20401231"

#sun= if [ %d = sun ]
#then
#       echo $sun

echo "$YEAR년도 $MONTH월"
echo "SUN  MON  TUE  WED  THU  FRI  SAT"
echo "================================="
echo "$sun  $mon  $tue  $wed  $thu  $fri  $sat"

....................
여기서 추가로 ... 입력한 년도와 달의 정보를 가져오는 것부터 하고
그게 되면 그걸 일만 숫자로 나타나게 하고
그 다음 한 줄에 7개씩 1일은 그 전달의 마지막 일 다음 자리에 오게 하고
사실상 윤년계산은 date를 불러와서 넣어줄꺼면 굳이 필요가 없을듯...?